img = rast(f[2])
plot(img)
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = rast()
for (i in 1:length(f)){
tmp = rast(f[i])
normalized = normalization(tmp)
img = c(img, tmp)
}
rm(list=ls())
library(terra)
p = '../improved_rsei/data/'
f = list.files(p, 'tif$', full.names = T)
img = rast(f[2])
plot(img)
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = img
for (i in 1:length(f)){
tmp = rast(f[i])
normalized = normalization(tmp)
img = c(img, tmp)
}
img
arr = img[2:5]
plot(arr)
arr = img[[2:5]]
plot(arr)
img = arr[[1]]
plot(img)
tmp = arr[[1]]
plot(tmp)
img = arr[[1]]
plot(img)
nrow(img)
i=1
Xij = nrow(img)
df = table(unique(values(img)))
df = as.data.frame(table(unique(values(img))))
View(df)
df = as.data.frame(table(unique(round(values(img),2))))
View(df)
r = round(img, 3)
v = as.data.frame(table(unique(r)))
View(v)
r = round(img, 1)
v = as.data.frame(table(unique(r)))
View(v)
r = round(img, 1)
plot(r)
v = values(r)
df = as.data.frame(table(v))
View(df)
r = round(img, 3)
plot(r)
v = values(r)
df = as.data.frame(table(v))
View(df)
df$'pij' = df$Freq / sum(df$Freq)
View(df)
sum(df$pij)
r = round(img, 3)
plot(r)
v = values(r)
df = na.omit(as.data.frame(table(v)))
r = round(img, 3)
plot(r)
v = values(r)
df = na.omit(as.data.frame(table(v)))
df$'pij' = df$Freq / sum(df$Freq)
n = nrow(df)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
e = - 1/log(n) * sum(df$sumpij)
entropyij = function(img, round=3){
r = round(img, round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
plot(arr)
entrpy_lst = entropyij(arr[[1]])
entrpy_bsi = entropyij(arr[[2]])
entrpy_ndvi = entropyij(arr[[3]])
entrpy_wet = entropyij(arr[[4]])
w_lst = (1=entrpy_lst) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_lst = (1-entrpy_lst) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_bsi = (1-entrpy_bsi) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_ndvi = (1-entrpy_ndvi) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_wet = (1-entrpy_wet) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_lst = (1-entrpy_lst) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_bsi = (1-entrpy_bsi) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_ndvi = (1-entrpy_ndvi) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
w_wet = (1-entrpy_wet) / (4-sum(entrpy_lst+entrpy_bsi+entrpy_ndvi+entrpy_wet))
sum(w_lst, w_bsi, w_wet. w_ndvi)
sum(w_lst, w_bsi, w_wet, w_ndvi)
# Calculate each entropy
entropy_1 = entropyij(arr[[1]])
entropy_2 = entropyij(arr[[2]])
entropy_3 = entropyij(arr[[3]])
entropy_4 = entropyij(arr[[4]])
names(img)
rsei_entropy = function(img, round=3){
# Denfine function calculate entropy
entropyij = function(img, round=3){
r = round(img, round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = round)
entropy_2 = entropyij(arr[[2]], round = round)
entropy_3 = entropyij(arr[[3]], round = round)
entropy_4 = entropyij(arr[[4]], round = round)
w1 = (1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w2 = (1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w3 = (1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w4 = (1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rm(list=ls())
function (x, df1, df2, ncp, log = FALSE)
rm(list=ls())
library(terra)
p = '../improved_rsei/data/'
f = list.files(p, 'tif$', full.names = T)
img = rast(f[2])
plot(img)
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = img
for (i in 1:length(f)){
tmp = rast(f[i])
normalized = normalization(tmp)
img = c(img, tmp)
}
arr = img[[2:5]]
plot(arr)
rsei_entropy = function(img, round=3){
# Denfine function calculate entropy
entropyij = function(img, round=3){
r = round(img, round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = round)
entropy_2 = entropyij(arr[[2]], round = round)
entropy_3 = entropyij(arr[[3]], round = round)
entropy_4 = entropyij(arr[[4]], round = round)
w1 = (1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w2 = (1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w3 = (1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
w4 = (1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4))
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rs = rsei_entropy(arr, 3)
rsei_entropy = function(img, round=3){
# Denfine function calculate entropy
entropyij = function(img, round=3){
r = round(img, round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = round)
entropy_2 = entropyij(arr[[2]], round = round)
entropy_3 = entropyij(arr[[3]], round = round)
entropy_4 = entropyij(arr[[4]], round = round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rs = rsei_entropy(arr, 3)
plot(rs)
rm(list=ls())
library(terra)
p = '../improved_rsei/data/'
f = list.files(p, 'tif$', full.names = T)
img = rast(f[2])
plot(img)
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = img
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = img
img = rast(f[1])
for (i in 1:length(f)){
tmp = rast(f[i])
normalized = normalization(tmp)
img = c(img, tmp)
}
arr = img[[2:5]]
plot(arr)
rsei_entropy = function(img, # stack normalized image
round=3 # round digit number for image round and weight round
){
# Denfine function calculate entropy
entropyij = function(img, round=3){
r = round(img, round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = round)
entropy_2 = entropyij(arr[[2]], round = round)
entropy_3 = entropyij(arr[[3]], round = round)
entropy_4 = entropyij(arr[[4]], round = round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rs = rsei_entropy(arr, 3)
plot(rs)
plot(rsei)
rsei = rsei_entropy(arr, 3)
plot(rsei)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round=img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = wround)
entropy_2 = entropyij(arr[[2]], round = wround)
entropy_3 = entropyij(arr[[3]], round = wround)
entropy_4 = entropyij(arr[[4]], round = wround)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round=img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = wround)
entropy_2 = entropyij(arr[[2]], round = wround)
entropy_3 = entropyij(arr[[3]], round = wround)
entropy_4 = entropyij(arr[[4]], round = wround)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), round)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round=img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = img_round)
entropy_2 = entropyij(arr[[2]], round = img_round)
entropy_3 = entropyij(arr[[3]], round = img_round)
entropy_4 = entropyij(arr[[4]], round = img_round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = img_round)
entropy_2 = entropyij(arr[[2]], round = img_round)
entropy_3 = entropyij(arr[[3]], round = img_round)
entropy_4 = entropyij(arr[[4]], round = img_round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], round = img_round)
entropy_2 = entropyij(arr[[2]], round = img_round)
entropy_3 = entropyij(arr[[3]], round = img_round)
entropy_4 = entropyij(arr[[4]], round = img_round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], img_round = img_round)
entropy_2 = entropyij(arr[[2]], img_round = img_round)
entropy_3 = entropyij(arr[[3]], img_round = img_round)
entropy_4 = entropyij(arr[[4]], img_round = img_round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 5, 3)
rsei = rsei_entropy(arr, 2, 5)
plot(rsei)
rsei = rsei_entropy(arr, 3, 3)
plot(rsei)
rm(list=ls())
library(terra)
p = '../improved_rsei/data/'
f = list.files(p, 'tif$', full.names = T)
normalization = function(img){
minv = min(values(img), na.rm=T)
maxv = max(values(img), na.rm=T)
nv = (img - minv) / (maxv - minv)
return(nv)
}
img = rast(f[1])
for (i in 1:length(f)){
tmp = rast(f[i])
normalized = normalization(tmp)
img = c(img, tmp)
}
arr = img[[2:5]]
plot(arr)
rsei_entropy = function(img, # stack normalized image
img_round=5, # round digit number for image round and weight round
wround=3 # round digit number for  weight round
){
# Denfine function calculate entropy
entropyij = function(img, img_round){
r = round(img, img_round)
vals= values(r)
df = na.omit(as.data.frame(table(vals)))
df$'pij' = df$Freq / sum(df$Freq)
df$'sumpij' = df$pij * log(df$pij)
n = nrow(df)
entropy = - 1/log(n) * sum(df$sumpij)
return(entropy)
}
# Calculate each entropy
entropy_1 = entropyij(arr[[1]], img_round = img_round)
entropy_2 = entropyij(arr[[2]], img_round = img_round)
entropy_3 = entropyij(arr[[3]], img_round = img_round)
entropy_4 = entropyij(arr[[4]], img_round = img_round)
w1 = round((1- entropy_1) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w2 = round((1- entropy_2) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w3 = round((1- entropy_3) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
w4 = round((1- entropy_4) / (4- sum(entropy_1 + entropy_2 + entropy_3 + entropy_4)), wround)
entropy = list(w1, w2, w3, w4)
rsei = w1*img[[1]] + w1*img[[3]] + w1*img[[3]] + w1*img[[4]]
print(paste(names(img), entropy))
return(rsei)
}
rsei = rsei_entropy(arr, 3, 3)
plot(rsei)
